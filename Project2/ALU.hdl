// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // reference: https://github.com/EricRichardson/Nand2Tetris/blob/master/project2/ALU.hdl
   // implement zx and nx:
   Mux16(a = x, b = false, sel = zx, out = xorzer);
   Not16(in = xorzer, out = notxorzer);
   Mux16(a = xorzer, b = notxorzer, sel = nx, out = nxz);

   // implement zy and ny:
   Mux16(a = y, b = false, sel = zy, out = yorzer);
   Not16(in = yorzer, out = notyOrzer);
   Mux16(a = yorzer, b = notyOrzer, sel = ny, out = nyz);

   //implement f: x+y or x&y
   Add16(a = nxz, b = nyz , out = addxy);
   And16(a = nxz, b = nyz, out = andxy);
   Mux16(a = andxy, b = addxy, sel = f, out = fxy);

   //implement no
   Not16(in = fxy, out = nfxy);
   Mux16 (a = fxy, b= nfxy, sel=no, out=out, out[15] = ng, out[0] = o1, out[1] = o2, out[2] = o3, out[3] = o4, out[4] = o5, out[5] = o6, out[6] = o7, out[7]=o8, out[8]=o9, out[9]=o10, out[10]=o11, out[11]=o12, out[12] = o13, out[13] = o14, out[14] = o15, out[15] = o16);
   Or (a=o1, b=o2, out=zo1);
   Or (a=o3, b=o4, out=zo2);
   Or (a=o5, b=o6, out=zo3);
   Or (a=o7, b=o8, out=zo4);
   Or (a=o9, b=o10, out=zo5);
   Or (a=o11, b=o12, out=zo6);
   Or (a=o13, b=o14, out=zo7);
   Or (a=o15, b=o16, out=zo8);
   Or (a=zo1, b=zo2, out=r2zo1);
   Or (a=zo3, b=zo4, out=r2zo2);
   Or (a=zo5, b=zo6, out=r2zo3);
   Or (a=zo7, b=zo8, out=r2zo4);
   Or (a=r2zo1, b=r2zo2, out=r3zo1);
   Or (a=r2zo3, b=r2zo4, out=r3zo2);
   Or (a=r3zo1, b=r3zo2, out=notzr);
   Not (in=notzr, out=zr);
}